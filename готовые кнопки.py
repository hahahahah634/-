import telebot
import base64
import requests
import threading
import io
import time

from urllib.parse import urlparse
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
from PIL import Image

API_KEY = '63bde2892bef6c2f6e7bfd5cdbe17c62104f433b320670c374854b1a88255c6f'
BOT_TOKEN = '8152524170:AAGnd3ZifJmhwIBImJG0_WaRBNuk7LK7NXQ'

bot = telebot.TeleBot(BOT_TOKEN)

user_read_message = {}
last_check_time = {}

def normalize_url(url):
    return urlparse(url, scheme="https").geturl()

def check_url(url, chat_id):
    bot.send_message(chat_id, "üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    url = normalize_url(url)
    headers = { 'x-apikey': API_KEY }
    url_id = base64.urlsafe_b64encode(url.encode()).decode().strip("=")

    r = requests.get(f"https://www.virustotal.com/api/v3/urls/{url_id}", headers=headers)

    if r.status_code == 200:
        data = r.json()['data']['attributes']['last_analysis_stats']
        total = sum(data.values())

        result = f"""‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã—Ö: {data['harmless']}
‚ùå –û–ø–∞—Å–Ω—ã—Ö: {data['malicious']}
‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö: {data['suspicious']}
üî∂ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö: {data['undetected']}

üîç –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–∞–º–∏: {total}
–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö: {data['harmless']}
–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö: {data['malicious']}
–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö: {data['suspicious']}
–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö: {data['undetected']}
"""
    else:
        result = "‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ VirusTotal."

    bot.send_message(chat_id, "‚úÖ –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
    bot.send_message(chat_id, "üì∏ –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–∞–π—Ç–∞...")
    bot.send_message(chat_id, result)
    bot.send_photo(chat_id, capture_screenshot(url))

def capture_screenshot(url):
    options = Options()
    options.add_argument("--headless")
    options.add_argument("--disable-gpu")
    options.add_argument("--no-sandbox")

    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
    driver.get(url)

    screenshot = driver.get_screenshot_as_png()
    driver.quit()

    return io.BytesIO(screenshot)

@bot.message_handler(commands=['start'])
def start(message):
    user_read_message[message.chat.id] = False

    markup = telebot.types.InlineKeyboardMarkup()
    btn_check = telebot.types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data="check")
    btn_help = telebot.types.InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data="help")
    btn_read = telebot.types.InlineKeyboardButton("–Ø –ø—Ä–æ—á–∏—Ç–∞–ª", callback_data="read")

    markup.add(btn_check)
    markup.add(btn_help)
    markup.add(btn_read)

    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ VirusTotal.",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    chat_id = call.message.chat.id

    if call.data == "read":
        user_read_message[chat_id] = True
        bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None)
        bot.send_message(chat_id, "–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞!")

        # –°—Ä–∞–∑—É –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–Ø –ø—Ä–æ—á–∏—Ç–∞–ª", –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        markup = telebot.types.InlineKeyboardMarkup()
        btn_check = telebot.types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data="check")
        btn_help = telebot.types.InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data="help")
        markup.add(btn_check, btn_help)
        bot.send_message(chat_id, "–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:", reply_markup=markup)

    elif call.data == "help":
        if not user_read_message.get(chat_id, False):
            bot.send_message(chat_id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏ '–Ø –ø—Ä–æ—á–∏—Ç–∞–ª' –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º.")
            return

        help_text = """
üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –º–µ–Ω—é
/help - –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
/check <—Å—Å—ã–ª–∫–∞> - –ü—Ä–æ–≤–µ—Ä–∫–∞ URL
        """
        bot.send_message(chat_id, help_text)
    elif call.data == "check":
        if not user_read_message.get(chat_id, False):
            bot.send_message(chat_id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏ '–Ø –ø—Ä–æ—á–∏—Ç–∞–ª' –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º.")
            return

        markup = telebot.types.ForceReply(selective=True)
        bot.send_message(chat_id, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:", reply_markup=markup)

@bot.message_handler(commands=['check'])
def check_command(message):
    if not user_read_message.get(message.chat.id, False):
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏ '–Ø –ø—Ä–æ—á–∏—Ç–∞–ª' –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º.")
        return

    current_time = time.time()
    last_time = last_check_time.get(message.chat.id, 0)

    if current_time - last_time < 60:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ —Å–ø–∞–º—å! –ò—Å–ø–æ–ª—å–∑—É–π /check –Ω–µ —á–∞—â–µ —Ä–∞–∑–∞ –≤ –º–∏–Ω—É—Ç—É.")
        return

    last_check_time[message.chat.id] = current_time

    markup = telebot.types.ForceReply(selective=True)
    bot.send_message(message.chat.id, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:", reply_markup=markup)

@bot.message_handler(commands=['help'])
def help_command(message):
    if not user_read_message.get(message.chat.id, False):
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏ '–Ø –ø—Ä–æ—á–∏—Ç–∞–ª' –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º.")
        return

    help_text = """
üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –º–µ–Ω—é
/help - –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
/check <—Å—Å—ã–ª–∫–∞> - –ü—Ä–æ–≤–µ—Ä–∫–∞ URL
    """
    bot.send_message(message.chat.id, help_text)

@bot.message_handler(func=lambda message: message.text.startswith("http"))
def handle_url(message):
    if not user_read_message.get(message.chat.id, False):
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏ '–Ø –ø—Ä–æ—á–∏—Ç–∞–ª' –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º.")
        return

    threading.Thread(target=check_url, args=(message.text, message.chat.id)).start()

@bot.message_handler(func=lambda message: True)
def handle_unknown(message):
    if not user_read_message.get(message.chat.id, False):
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏ '–Ø –ø—Ä–æ—á–∏—Ç–∞–ª' –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º.")
        return

    bot.send_message(message.chat.id, "–Ø –Ω–µ –ø–æ–Ω—è–ª —Ç–≤–æ—é –∫–æ–º–∞–Ω–¥—É. –í–≤–µ–¥–∏ /help —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫.")

bot.polling(none_stop=True)